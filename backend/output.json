{"summary":"This smart contract is designed to be a wrapped version of the Binance Coin (BNB) on the Binance Smart Chain. Wrapped tokens are tradable tokens equal in value with their respective underlying assets. In this case, the smart contract creates Wrapped BNB (WBNB) as a token that is equivalent in value to the native BNB token. \n\nThe primary purpose of creating wrapped tokens is to enable more fluid trading of assets on platforms like decentralized exchanges. WBNB allows users to participate in DeFi applications, like liquidity pools and decentralized exchanges, without having to use native BNB directly, thus providing more flexibility and opportunities for users and developers.\n\nThe contract includes methods for users to deposit their BNB tokens and receive WBNB tokens in return. The deposit function allows the user to send BNB to the smart contract by calling the contract and increasing the user's balance in WBNB by the same amount. An event called `Deposit` is emitted to record this transaction.\n\nThe user can then withdraw their BNB from the contract by calling the `withdraw` function, where their WBNB balance will be reduced by the same amount and the native BNB tokens will be transferred back to their address. An event called `Withdrawal` is emitted to record this transaction.\n\nThe contract also allows users to check the total supply of WBNB tokens through the `totalSupply` function, which returns the total balance of the smart contract in BNB.\n\nFurthermore, the contract enables users to transfer WBNB tokens to other addresses using the `transfer` function or `transferFrom` function. To do this, users must first approve an allowance for an address, specifying a maximum amount that they can transfer on behalf of the user using the `approve` function. When any transfers occur, a `Transfer` event is emitted to record the transaction. The `allowance` is also updated after successful completion of a transfer.\n\nThis smart contract can be integrated into decentralized applications (dApps) and DeFi platforms by developers, allowing them access to WBNB functionality and enabling seamless swapping between BNB and WBNB tokens. This creates a more diverse ecosystem for the Binance Smart Chain users and developers.","ethers":"1. Get the total supply of WBNB tokens\n```javascript\nconst wbnbContract = await ethers.getContractAt('WBNB', 'WBNB_CONTRACT_ADDRESS');\nconst totalSupply = await wbnbContract.totalSupply();\nconsole.log(`Total supply of WBNB tokens:`, ethers.utils.formatUnits(totalSupply, 'ether'));\n```\n\n2. Deposit BNB to get WBNB tokens\n```javascript\nconst depositAmount = ethers.utils.parseUnits('0.1', 'ether'); // Replace '0.1' with desired BNB amount\nawait wbnbContract.deposit({ value: depositAmount });\n```\n\n3. Withdraw WBNB to get BNB tokens\n```javascript\nconst withdrawAmount = ethers.utils.parseUnits('0.1', 'ether'); // Replace '0.1' with desired WBNB amount\nawait wbnbContract.withdraw(withdrawAmount);\n```\n\n4. Get the balance of a user's WBNB tokens\n```javascript\nconst userAddress = 'USER_ADDRESS';\nconst userBalance = await wbnbContract.balanceOf(userAddress);\nconsole.log(`User's balance of WBNB tokens:`, ethers.utils.formatUnits(userBalance, 'ether'));\n```\n\n5. Approve another address to spend WBNB tokens on your behalf\n```javascript\nconst spenderAddress = 'SPENDER_ADDRESS';\nconst approveAmount = ethers.utils.parseUnits('0.1', 'ether'); // Replace '0.1' with desired WBNB amount\nawait wbnbContract.approve(spenderAddress, approveAmount);\n```\n\n6. Transfer WBNB tokens to another address\n```javascript\nconst recipientAddress = 'RECIPIENT_ADDRESS';\nconst transferAmount = ethers.utils.parseUnits('0.1', 'ether'); // Replace '0.1' with desired WBNB amount\nawait wbnbContract.transfer(recipientAddress, transferAmount);\n```\n\n7. Transfer WBNB tokens on behalf of another address (ensure approval has been given)\n```javascript\nconst fromAddress = 'FROM_ADDRESS';\nconst recipientAddress = 'RECIPIENT_ADDRESS';\nconst transferAmount = ethers.utils.parseUnits('0.1', 'ether'); // Replace '0.1' with desired WBNB amount\nawait wbnbContract.transferFrom(fromAddress, recipientAddress, transferAmount);\n```","wagmi":"1. Get the total supply of WBNB tokens\n```javascript\nconst { data: totalSupply } = useContractRead({\n    address: 'WBNB_CONTRACT_ADDRESS',\n    abi: WBNB.abi,\n    functionName: 'totalSupply'\n});\nconsole.log(`Total supply of WBNB tokens:`, totalSupply ? ethers.utils.formatUnits(totalSupply, 'ether') : 'Loading...');\n```\n\n2. Deposit BNB to get WBNB tokens\n```javascript\nconst depositAmount = ethers.utils.parseUnits(\"1\", \"ether\"); // deposit 1 BNB\nconst { send: deposit } = useContractSend({\n    address: 'WBNB_CONTRACT_ADDRESS',\n    abi: WBNB.abi,\n    functionName: 'deposit',\n    value: depositAmount\n});\n\ndeposit().then(tx => {\n    console.log(\"Deposit transaction: \", tx);\n}).catch(error => {\n    console.error(\"Deposit failed: \", error);\n});\n```\n\n3. Withdraw BNB from WBNB tokens\n```javascript\nconst withdrawAmount = ethers.utils.parseUnits(\"1\", \"ether\"); // withdraw 1 BNB\nconst { send: withdraw } = useContractSend({\n    address: 'WBNB_CONTRACT_ADDRESS',\n    abi: WBNB.abi,\n    functionName: 'withdraw',\n    args: [withdrawAmount],\n});\n\nwithdraw().then(tx => {\n    console.log(\"Withdraw transaction: \", tx);\n}).catch(error => {\n    console.error(\"Withdraw failed: \", error);\n});\n```\n\n4. Get the balance of a user's WBNB tokens\n```javascript\nconst userAddress = 'USER_ADDRESS';\nconst { data: userBalance } = useContractRead({\n    address: 'WBNB_CONTRACT_ADDRESS',\n    abi: WBNB.abi,\n    functionName: 'balanceOf',\n    args: [userAddress],\n});\n\nconsole.log(`User's balance of WBNB tokens:`, userBalance ? ethers.utils.formatUnits(userBalance, 'ether') : 'Loading...');\n```\n\n5. Transfer WBNB tokens to another address\n```javascript\nconst recipientAddress = 'RECIPIENT_ADDRESS';\nconst transferAmount = ethers.utils.parseUnits(\"1\", \"ether\"); // transfer 1 WBNB\nconst { send: transfer } = useContractSend({\n    address: 'WBNB_CONTRACT_ADDRESS',\n    abi: WBNB.abi,\n    functionName: 'transfer',\n    args: [recipientAddress, transferAmount],\n});\n\ntransfer().then(tx => {\n    console.log(\"Transfer transaction: \", tx);\n}).catch(error => {\n    console.error(\"Transfer failed: \", error);\n});\n```\n\n6. Approve another address to spend WBNB tokens on your behalf\n```javascript\nconst spenderAddress = 'SPENDER_ADDRESS';\nconst allowanceAmount = ethers.utils.parseUnits(\"1\", \"ether\"); // allow spender to spend 1 WBNB\nconst { send: approve } = useContractSend({\n    address: 'WBNB_CONTRACT_ADDRESS',\n    abi: WBNB.abi,\n    functionName: 'approve',\n    args: [spenderAddress, allowanceAmount],\n});\n\napprove().then(tx => {\n    console.log(\"Approve transaction: \", tx);\n}).catch(error => {\n    console.error(\"Approve failed: \", error);\n});\n```"}